class DarkDoomZ_Flashlight : HDWeapon
{
	enum FlashlightProperty
	{
		FLProp_Flags,
		FLProp_Battery,
		FLProp_DrainTicker
	}

	private action void A_AddOffset(int ofs)
	{
		invoker.UseOffset += ofs;
	}

	override bool Use(bool pickup)
	{
		if (!pickup && owner && !(owner.player.cmd.buttons & BT_USE))
		{
			if (Active)
			{
				DeactivateLight();
				return false;
			}
			else
			{
				ActivateLight();
				return false;
			}
		}
		return Super.Use(pickup);
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner , bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override string, double GetPickupSprite() { return "DDFLA0", 1.0; }
	override string GetHelpText()
	{
		return WEPHELP_RELOAD.."  Reload battery\n"
		..WEPHELP_UNLOAD.."  Unload battery\n"
		..WEPHELP_USE.." (item)  Toggle on/off";
	}
	override double WeaponBulk() { return 8 + (WeaponStatus[FLProp_Battery] >= 0 ? ENC_BATTERY_LOADED : 0); }
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[FLProp_Battery] = 20;
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		vector2 bob = hpl.hudbob * 0.3;
		bob.y += UseOffset;
		
		sb.DrawImage("DDFLA0", bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER, scale: (3.0, 3.0));
		int bat = hdw.WeaponStatus[FLProp_Battery];
		if (bat >= 0)
		{
			sb.DrawImage(AceCore.GetBatteryColor(bat), (0, 30) + bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_CENTER, scale: (1.5, 1.5));
		}
	}

	override void Tick()
	{
		Super.Tick();

		if (!Quality) { Quality = CVar.GetCvar("ddz_fl_quality"); }
		if (!Beam) { Beam = CVar.GetCvar("ddz_fl_type"); }
		if (!Mount) { Mount = CVar.GetCvar("ddz_fl_pos"); }
		if (!Handler) { Handler = DarkDoomZ_Handler(StaticEventHandler.Find('DarkDoomZ_Handler')); }

		if (!Active)
		{
			return;
		}

		int qual = Quality.GetInt();
		int beamIndex = min(Beam.GetInt(), Handler.Beams.Size() - 1);
		int mountIndex = min(Mount.GetInt(), Handler.Mounts.Size() - 1);

		if (qual != OldQuality || beamIndex != OldBeam || mountIndex != OldMount)
		{
			DeactivateLight(true);
			ActivateLight(true);	
		}
		if (!owner)
		{
			DeactivateLight(true);
		}
		else if (WeaponStatus[FLProp_Battery] > 0)
		{
			if (++WeaponStatus[FLProp_DrainTicker] > 6300)
			{
				WeaponStatus[FLProp_Battery]--;
				WeaponStatus[FLProp_DrainTicker] = 0;
			}
		}
		else
		{
			DeactivateLight(true);
		}

		OldQuality = qual;
		OldBeam = beamIndex;
		OldMount = mountIndex;
	}

	void ActivateLight(bool silent = false)
	{
		if (!silent)
		{
			owner.A_StartSound("DarkDoomZ/Flashlight/Click", CHAN_AUTO, 0, 0.5);
		}

		if (WeaponStatus[FLProp_Battery] > 0)
		{
			Active = true;

			int qual = Quality.GetInt();
			int beamIndex = min(Beam.GetInt(), Handler.Beams.Size() - 1);
			int mountIndex = min(Mount.GetInt(), Handler.Mounts.Size() - 1);

			if (!InnerLight)
			{
				InnerLight = DarkDoomZ_Spotlight.CreateBeam(owner, Handler.Beams[beamIndex], Handler.Mounts[mountIndex], qual == 1);
			}
			if (qual == 1 && !OuterLight)
			{
				OuterLight = DarkDoomZ_Spotlight.CreateBeam(owner, Handler.Beams[beamIndex], Handler.Mounts[mountIndex], 2);
			}
		}
	}

	void DeactivateLight(bool silent = false)
	{
		Active = false;
		if (!silent)
		{
			owner.A_StartSound("DarkDoomZ/Flashlight/Click", CHAN_AUTO, 0, 0.5);
		}
		if (InnerLight) { InnerLight.Destroy(); }
		if (OuterLight) { OuterLight.Destroy(); }
	}

	override void OnDestroy()
	{
		DeactivateLight();
		Super.OnDestroy();
	}

	private bool Active;
	private int UseOffset;

	private transient CVar Quality, Beam, Mount;
	private int OldQuality, OldBeam, OldMount;
	private DarkDoomZ_Spotlight InnerLight, OuterLight;
	private DarkDoomZ_Handler Handler;

	Default
	{
		+HDWEAPON.FITSINBACKPACK
		+INVENTORY.INVBAR
		+WEAPON.WIMPY_WEAPON
		-HDWEAPON.DROPTRANSLATION
		Inventory.MaxAmount 5;
		Inventory.Icon "DDFLA0";
		Inventory.PickupSound "weapons/pocket";
		Inventory.PickupMessage "You picked up a flashlight.";
		Tag "Flashlight";
		HDWeapon.RefId "ddf";
		Scale 0.6;
	}

	States
	{
		Spawn:
			DDFL A -1 NoDelay;
			Loop;
		Select:
			TNT1 A 0 A_AddOffset(100);
			Goto Super::Select;
		Ready:
			TNT1 A 1
			{
				if (PressingUser3())
				{
					A_MagManager("HDBattery");
					return;
				}

				int off = invoker.UseOffset;
				if (off > 0)
				{
					invoker.UseOffset = off * 2 / 3;
				}

				A_WeaponReady(WRF_ALL | WRF_NOFIRE);
			}
			Goto ReadyEnd;
		Unload:
			TNT1 A 20;
			TNT1 A 5
			{
				int Bat = invoker.WeaponStatus[FLProp_Battery];
				if (Bat < 0)
				{
					return;
				}
				if (PressingUnload() || PressingReload())
				{
					HDBattery.GiveMag(self, "HDBattery", Bat);
					A_StartSound("weapons/pocket", 9);
					A_SetTics(20);
				}
				else
				{
					HDBattery.SpawnMag(self, "HDBattery", Bat);
				}
				invoker.WeaponStatus[FLProp_Battery] = -1;
			}
			Goto ReloadEnd;
		Reload:
			TNT1 A 14 A_StartSound("weapons/pocket", 9);
			TNT1 A 5
			{
				if (invoker.WeaponStatus[FLProp_Battery] >= 0)
				{
					return;
				}
				let Bat = HDBattery(FindInventory("HDBattery"));
				if(!Bat)
				{
					return;
				}
				int Amt = Bat.TakeMag(true);
				invoker.WeaponStatus[FLProp_Battery] = Amt;
				A_StartSound("weapons/vulcopen1", 8, CHANF_OVERLAP);
			}
			Goto ReloadEnd;
		ReloadEnd:
			TNT1 A 6;
			Goto ready;
	}
}