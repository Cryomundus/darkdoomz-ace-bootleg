version "4.7"

#include "ZSCRIPT.Beams.zsc"
#include "ZSCRIPT.Mounts.zsc"
#include "ZSCRIPT.Flashlight.zsc"
#include "ZSCRIPT.MenuStuff.zsc"

class DarkDoomZ_DataHandler : StaticEventHandler
{
	Array<DDZ_LightBeamInfo> Beams;
	Array<DDZ_MountPoint> Mounts;

	override void OnRegister()
	{
		for (int i = 0; i < AllClasses.Size(); ++i)
		{
			if (AllClasses[i] is 'DDZ_LightBeamInfo' && !AllClasses[i].IsAbstract())
			{
				Beams.Push(DDZ_LightBeamInfo(new(AllClasses[i])));
			}
			if (AllClasses[i] is 'DDZ_MountPoint' && !AllClasses[i].IsAbstract())
			{
				Mounts.Push(DDZ_MountPoint(new(AllClasses[i])));
			}
		}
	}
}

class DarkDoomZ_LightHandler : EventHandler
{
	Array<int> BaseLightLevels;
	private transient CVar Mode, Preset, PreGain, PostGain, MinLight, SkyMode;
	int OldMode, OldPreset, OldPreGain, OldPostGain, OldMinLight;
	double OldSkyMode;

	override void WorldLoaded(WorldEvent e)
	{
		if (!ddz_lighting)
		{
			ThinkerIterator it = ThinkerIterator.Create("Lighting");
			Lighting effect;
			while (effect = Lighting(it.Next()))
			{
				effect.Destroy();
			}
		}

		BaseLightLevels.Clear();
		for (int i = 0; i < Level.Sectors.Size(); ++i)
		{
			BaseLightlevels.Push(Level.Sectors[i].LightLevel);
		}

		ChangeLighting();

		if (e.isReopen)
		{
			let iterator = ThinkerIterator.Create('DarkDoomZ_Spotlight');
			for (Thinker mo; (mo = iterator.Next());)
			{
				mo.Destroy();
			}
		}
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let bat = HDBattery(e.Thing);
		if (bat)
		{
			bat.ItemsThatUseThis.Push("DarkDoomZ_Flashlight");
		}
	}
	
	override void UiTick()
	{
		EventHandler.SendNetworkEvent("UpdateLights");
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "UpdateLights")
		{
			ChangeLighting();
		}
	}

	void ChangeLighting()
	{
		if (!Mode) { Mode = CVar.GetCvar('ddz_mode'); }
		if (!Preset) { Preset = CVar.GetCvar('ddz_preset'); }
		if (!PreGain) { PreGain = CVar.GetCvar('ddz_pregain'); }
		if (!PostGain) { PostGain = CVar.GetCvar('ddz_postgain'); }
		if (!MinLight) { MinLight = CVar.GetCvar('ddz_minlight'); }
		if (!SkyMode) { SkyMode = CVar.GetCvar('ddz_skymode'); }

		bool changed = OldMode != Mode.GetInt() || OldPreset != Preset.GetInt() || OldPreGain != PreGain.GetInt() || OldPostGain != PostGain.GetInt() || OldMinLight != MinLight.GetInt() || OldSkyMode != Skymode.GetFloat();

		if (changed)
		{
			int baseAdjustment = 32 * Preset.GetInt();

			for (int i = 0; i < BaseLightLevels.Size(); ++i)
			{
				int baseLevel = BaseLightLevels[i];
				baseLevel += PreGain.GetInt();

				bool IsSky = level.Sectors[i].GetTexture(0) == skyflatnum || level.Sectors[i].GetTexture(1) == skyflatnum;

				int finalAdjustment = baseAdjustment;
				if (IsSky)
				{
					finalAdjustment = int(finalAdjustment * SkyMode.GetFloat());
				}

				// Link to graphing calculator depiction of different modes
				// https://www.desmos.com/calculator/v1ni4wftcg
				switch (Mode.GetInt())
				{
					case 1: //subtract raw light level (simple fade)
						Level.Sectors[i].Lightlevel = baseLevel - finalAdjustment;
						break;
					case 2: //linear compression
						Level.Sectors[i].Lightlevel = int(baseLevel * (1.0 - finalAdjustment / 256.0));
						break;
					case 3: //clamp max brightness level
						Level.Sectors[i].Lightlevel = clamp(baseLevel, 0, 256 - finalAdjustment);
						break;
					case 4: //apply exponential gamma curve
						Level.Sectors[i].Lightlevel = int((256 - (finalAdjustment ** (finalAdjustment / 256))) * (baseLevel / 256.0) ** (1 + (finalAdjustment / (33 - (finalAdjustment / 8)))));
						break;
					case 10: //DarkDoom Lite (fixed subtract mode)
						Level.Sectors[i].Lightlevel = baseLevel - 96;
						break;
					case 11: //DarkDoom Classic (fixed subtract mode)
						Level.Sectors[i].Lightlevel = baseLevel - 128;
						break;
					case 12: //DarkDoom Black (fixed subtract mode)
						Level.Sectors[i].Lightlevel = baseLevel - 256;
						break;
					default: //disable
						Level.Sectors[i].Lightlevel = baseLevel; //reset lightlevels
						break;
				}

				Level.Sectors[i].Lightlevel += PostGain.GetInt();
				Level.Sectors[i].Lightlevel = max(Level.Sectors[i].Lightlevel, MinLight.GetInt());
			}
		}

		OldMode = Mode.GetInt();
		OldPreset = Preset.GetInt();
		OldPreGain = PreGain.GetInt();
		OldPostGain = PostGain.GetInt();
		OldMinLight = MinLight.GetInt();
		OldSkyMode = SkyMode.GetFloat();
	}
}

class DarkDoomZ_Spotlight : DynamicLight
{
	static DarkDoomZ_Spotlight CreateBeam(Actor other, DDZ_LightBeamInfo beam, DDZ_MountPoint mount, int type)
	{
		let light = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight", other.pos, false));
		light.FollowTarget = other;
		[light.Args[DynamicLight.LIGHT_RED], light.Args[DynamicLight.LIGHT_GREEN], light.Args[DynamicLight.LIGHT_BLUE]] = beam.GetColor(type == 2);
		[light.SpotInnerAngle, light.SpotOuterAngle, light.Args[DynamicLight.LIGHT_INTENSITY]] = beam.GetRadius(type);
		light.angle = other.angle;
		light.pitch = other.pitch;
		[light.Spring, light.Damping, light.Inertia, light.OffsetAngle, light.OffsetZ] = mount.GetMountInfo();
		return light;
	}

	override void Tick()
	{
		Super.Tick();
		if (followTarget && followTarget.player)
		{
			if (Inertia == 0)
			{
				Inertia = 1;
			}
			targetpos = followTarget.Vec3Angle(
				2 + (6 * abs(sin(OffsetAngle))),
				followtarget.angle + OffsetAngle,
				followtarget.player.viewz - followtarget.pos.z + OffsetZ,
				false);
			vel.x += DampedSpring(pos.x, targetpos.x, vel.x, 1, 1);
			vel.y += DampedSpring(pos.y, targetpos.y, vel.y, 1, 1);
			vel.z += DampedSpring(pos.z, targetpos.z, vel.z, 1, 1);
			vela += DampedSpring(angle, followTarget.angle, vela, Spring, Damping);
			velp += DampedSpring(pitch, followTarget.pitch, velp, Spring, Damping);
			SetOrigin(pos + vel, true);
			A_SetAngle(angle + (vela / Inertia), true);
			A_SetPitch(pitch + (velp / Inertia), true);
		}

		if (OldIntensity > 0 && UnflickerTimer-- == 0)
		{
			Args[DynamicLight.LIGHT_INTENSITY] = OldIntensity;
			OldIntensity = 0;
		}
	}

	void Flicker(int offDuration, double minFac, double maxFac)
	{
		if (OldIntensity == 0)
		{
			OldIntensity = Args[DynamicLight.LIGHT_INTENSITY];
			Args[DynamicLight.LIGHT_INTENSITY] = int(Args[DynamicLight.LIGHT_INTENSITY] * frandom(minFac, maxFac));
			UnflickerTimer = offDuration;
		}
	}

	double DampedSpring(double p, double r, double v, double k, double d)
	{
		return -(d * v) - (k * (p - r));
	}

	private int OldIntensity, UnflickerTimer;
	private Actor FollowTarget;
	private vector3 targetPos;
	private double vela, velp, Spring, Damping, OffsetAngle, OffsetZ;
	private int Inertia;

	Default
	{
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}
}