class DDZ_LightBeamInfo abstract
{
	abstract clearscope string GetName();
	abstract int, int, int GetRadius(int type); // [Ace] 0 = simple, 1 = quality, inner beam, 2 = quality, outer beam;
	abstract int, int, int GetColor(bool secondary);
}

class DDZ_RedFilter : DDZ_LightBeamInfo
{
	override string GetName() { return "Red filter"; }
	override int, int, int GetRadius(int type)
	{
		switch (type)
		{
			default: return 5, 40, 192;
			case 1: return 0, 20, 256;
			case 2: return 10, 60, 128;
		}
	}
	override int, int, int GetColor(bool secondary)
	{
		// [Ace] Ternaries don't work here.
		if (secondary) { return 144, 27, 25; }
		return 192, 36, 34;
	}
}

class DDZ_Incandescent : DDZ_LightBeamInfo
{
	override string GetName() { return "Incandescent (Yellow)"; }
	override int, int, int GetRadius(int type)
	{
		switch (type)
		{
			default: return 7, 35, 256;
			case 1: return 0, 25, 384;
			case 2: return 15, 45, 128;
		}
	}
	override int, int, int GetColor(bool secondary)
	{
		if (secondary) { return 191, 160, 127; }
		return 255, 214, 170;
	}
}

class DDZ_IncandescentBlue : DDZ_Incandescent
{
	override string GetName() { return "Incandescent (Blue)"; }
	override int, int, int GetColor(bool secondary)
	{
		if (secondary) { return 127, 160, 191; }
		return 170, 214, 255;
	}
}


class DDZ_Halogen : DDZ_LightBeamInfo
{
	override string GetName() { return "Halogen"; }
	override int, int, int GetRadius(int type)
	{
		switch (type)
		{
			default: return 5, 40, 448;
			case 1: return 0, 20, 512;
			case 2: return 10, 60, 384;
		}
	}
	override int, int, int GetColor(bool secondary)
	{
		if (secondary) { return 191, 180, 168; }
		return 255, 241, 224;
	}
}

class DDZ_LED : DDZ_LightBeamInfo
{
	override string GetName() { return "LED"; }
	override int, int, int GetRadius(int type)
	{
		switch (type)
		{
			default: return 7, 45, 448;
			case 1: return 0, 15, 640;
			case 2: return 15, 75, 256;
		}
	}
	override int, int, int GetColor(bool secondary)
	{
		if (secondary) { return 186, 191, 191; }
		return 248, 255, 255;
	}
}